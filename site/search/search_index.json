{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to linebyline About linebyline is a public python package for conducting high-precision radial velocity (RV) analysis, using the \"line-by-line\" technique of Dumusque (2018) . This package is a complete RV analysis pipeline, with the ability to process a series of 1D spectra and return corresponding line-by-line radial velocity measurements and stellar activity indices; linebyline also facilitates several different methods of stellar activity mitigation, including: \"Line selection\": calculating RVs using spectral lines shown to be insensitive to stellar activity (Dumusque, 2018) . \"Formation Depth\": using the difference between the RVs of deep and shallow spectral lines as an activity proxy (Cretignier et al. 2020) . FF': tracking stellar activity via a spot model and the star's photometric light curve (or an activity index) (Aigrain et al. 2012) . Gaussian process (GP) regression: do we want to include these? Currently, HARPS, HARPS-N, and MAROON-X are supported instruments. Installation To install, download the package, change directories into the downloaded folder, and run: pip install . Authors Siegel, J, Rubenzahl, R, Halverson, S, Howard, A","title":"Home"},{"location":"#welcome-to-linebyline","text":"","title":"Welcome to linebyline"},{"location":"#about","text":"linebyline is a public python package for conducting high-precision radial velocity (RV) analysis, using the \"line-by-line\" technique of Dumusque (2018) . This package is a complete RV analysis pipeline, with the ability to process a series of 1D spectra and return corresponding line-by-line radial velocity measurements and stellar activity indices; linebyline also facilitates several different methods of stellar activity mitigation, including: \"Line selection\": calculating RVs using spectral lines shown to be insensitive to stellar activity (Dumusque, 2018) . \"Formation Depth\": using the difference between the RVs of deep and shallow spectral lines as an activity proxy (Cretignier et al. 2020) . FF': tracking stellar activity via a spot model and the star's photometric light curve (or an activity index) (Aigrain et al. 2012) . Gaussian process (GP) regression: do we want to include these? Currently, HARPS, HARPS-N, and MAROON-X are supported instruments.","title":"About"},{"location":"#installation","text":"To install, download the package, change directories into the downloaded folder, and run: pip install .","title":"Installation"},{"location":"#authors","text":"Siegel, J, Rubenzahl, R, Halverson, S, Howard, A","title":"Authors"},{"location":"config/","text":"Configuration file This page introduces the configuration file. This file contains all the input parameters for processing stellar spectra using linebyline . The default setting are defined in: linebyline/configs/extraction_config.ini Users can specify alternative input parameters by either changing the above file or providing linebyline with a path to a different configuration file. Below, we all outline each parameter in the configuration file (divided between the Instrument and Specbatch objects). Instrument Object [instrument] airmass_lim = 1.5 snr10_lim = 10 verbose = False Specbatch.filter_for_continuum [filter_for_continuum] omin = 20 omax = 20 sigma = 20 verbose = False Specbatch.normalize_spectral_orders [normalize_spectral_orders] window_size = 100 Specbatch.fetch_template [fetch_template] template = auto sampling_per_order = 10000 bis_sampling = 100 min_width = 10 min_depth = 0.05 Specbatch.flag_telluric_TAPAS [flag_telluric_TAPAS] buffer = 48 threshold = 0.99 verbose = False drop = False filter_window = 100000 Specbatch.flag_crossover [flag_crossover] multiple = 512 buffer = 48 verbose = True Specbatch.fetch_LBL [fetch_LBL] nproc = 1 width = auto interp = False verbose = False sampling_per_line = 100 Specbatch.filter_LBL [filter_LBL] sigma_rv = 4 sigma_rv_err = 4 sigma_depth = 4 sigma_depth_err = 4 niter_rv = 4 niter_rv_err = 4 niter_depth = 4 niter_depth_err = 4 rejection_fraction = 0.9 drop = False Specbatch[save_functions] [save_functions] npoints = pixel save_master_name = master.csv save_lbl_data_name = LBL_data.csv save_template_name = template.csv","title":"Configuration file"},{"location":"config/#configuration-file","text":"This page introduces the configuration file. This file contains all the input parameters for processing stellar spectra using linebyline . The default setting are defined in: linebyline/configs/extraction_config.ini Users can specify alternative input parameters by either changing the above file or providing linebyline with a path to a different configuration file. Below, we all outline each parameter in the configuration file (divided between the Instrument and Specbatch objects).","title":"Configuration file"},{"location":"config/#instrument-object","text":"[instrument] airmass_lim = 1.5 snr10_lim = 10 verbose = False","title":"Instrument Object"},{"location":"config/#specbatchfilter_for_continuum","text":"[filter_for_continuum] omin = 20 omax = 20 sigma = 20 verbose = False","title":"Specbatch.filter_for_continuum"},{"location":"config/#specbatchnormalize_spectral_orders","text":"[normalize_spectral_orders] window_size = 100","title":"Specbatch.normalize_spectral_orders"},{"location":"config/#specbatchfetch_template","text":"[fetch_template] template = auto sampling_per_order = 10000 bis_sampling = 100 min_width = 10 min_depth = 0.05","title":"Specbatch.fetch_template"},{"location":"config/#specbatchflag_telluric_tapas","text":"[flag_telluric_TAPAS] buffer = 48 threshold = 0.99 verbose = False drop = False filter_window = 100000","title":"Specbatch.flag_telluric_TAPAS"},{"location":"config/#specbatchflag_crossover","text":"[flag_crossover] multiple = 512 buffer = 48 verbose = True","title":"Specbatch.flag_crossover"},{"location":"config/#specbatchfetch_lbl","text":"[fetch_LBL] nproc = 1 width = auto interp = False verbose = False sampling_per_line = 100","title":"Specbatch.fetch_LBL"},{"location":"config/#specbatchfilter_lbl","text":"[filter_LBL] sigma_rv = 4 sigma_rv_err = 4 sigma_depth = 4 sigma_depth_err = 4 niter_rv = 4 niter_rv_err = 4 niter_depth = 4 niter_depth_err = 4 rejection_fraction = 0.9 drop = False","title":"Specbatch.filter_LBL"},{"location":"config/#specbatchsave_functions","text":"[save_functions] npoints = pixel save_master_name = master.csv save_lbl_data_name = LBL_data.csv save_template_name = template.csv","title":"Specbatch[save_functions]"},{"location":"methods/","text":"Methods Haec ferae oblita posuere lacerata pinxit Lorem markdownum caerula in absens quantum pignore. Litora pennae descendere vicinia et venit lacrimisque summis ruborem proprium, lapillos aut, de faciam armata fitque carpe. Terra ingentia sibi crematisregia erat: quod vultu adhibere est ego; est mihi utroque distant. Postera superba; quae nostrum certamina dixit conspicit cura, quae non, care clivo anguis signataque cecidit ore. Iram aris! software = server; balancingSkuMinimize *= acl_runtime_model; if (winsDot) { secondary_menu_lossy += piracy / station_domain.iscsi(6, 4); tMetadata.readerGraphic(adapterVolumeName, kilobit + page); } variableRead.card(4, duplex_dot_hertz, 759076 - gigo); if (samba(video_soft, partitionEsports)) { router += telecommunications(protectorCapsLeak); android_dongle_lcd.motherboard_intelligence = usPort; } Pia retro fuit non inposito gratia quid Agitant Sol litus damnatus non Hector per faciebat ipsaque fugante etiamnum melius, an ordine, omnique passa. Effugit mora feto Lyctia conceptus Latialis vultus pendeat. Ira gloria et cupiere membra, parcite missa. Pulchra natus dicta hunc terque metuens purgamina intervenit huius circumfusaeque tergora senecta ictaque mora. In est quoque, et dixit Limyren . Negant increscere temptataque viridi caelum quantum, nec recepto medullas tu dixit tu et passim excusare. Bacchi vel fessa sine carpsit orbus est: tempora fugis diu? Moenia eadem habuisse radiataque iuvenci vocatur Nulla enim est precibus; hunc discrimine ut contra, traxit ipse sublime ossa . Gravem nisi tyrannus, et mota in tamen pariter vinci montibus geminaverat potui vulnera Narcissum furorem, ut bellaque. Umeri undis Cycnum nate adduxit videri me est fontes superest: pressit suo utrum Philoctete. In volunt populus novo obruta aequi Quod ramis quacumque media nomen Latini re Thybris sensit ruricolae halitus. In non ubi tum acumine fixo primus levata, vocat tacta, Phrygiaeque furca , in et nox, Pace. Ubi intravit, fugacis: iam suo munera volucres terris prensamque mutet radios, et. In fratres tergum, dabat regia fugacia contigero fixerat. Imagine nondum Glomerataque tuus, membra enim nimium amicior flumina veni. Vix mille, qua soror mortale malo noverit nec mens Echecli feroci ignes arcum; ex dei. Caesareo integer Iamque sanctius iuvat venerantur maestae tenuit , siccat non vates aquis. Gaudia ille non parat fert immo venit canor, dei. Est Aetne ipsamque nimiumque picem, sorores et, ire missa terrasque sumptis siccaverat diremit tum parabant se classem numina. Ne suum , requiescere excelsa patria per Andros paulum quod grave longeque cavernis cum.","title":"Methods"},{"location":"methods/#methods","text":"","title":"Methods"},{"location":"methods/#haec-ferae-oblita-posuere-lacerata-pinxit","text":"Lorem markdownum caerula in absens quantum pignore. Litora pennae descendere vicinia et venit lacrimisque summis ruborem proprium, lapillos aut, de faciam armata fitque carpe. Terra ingentia sibi crematisregia erat: quod vultu adhibere est ego; est mihi utroque distant. Postera superba; quae nostrum certamina dixit conspicit cura, quae non, care clivo anguis signataque cecidit ore. Iram aris! software = server; balancingSkuMinimize *= acl_runtime_model; if (winsDot) { secondary_menu_lossy += piracy / station_domain.iscsi(6, 4); tMetadata.readerGraphic(adapterVolumeName, kilobit + page); } variableRead.card(4, duplex_dot_hertz, 759076 - gigo); if (samba(video_soft, partitionEsports)) { router += telecommunications(protectorCapsLeak); android_dongle_lcd.motherboard_intelligence = usPort; }","title":"Haec ferae oblita posuere lacerata pinxit"},{"location":"methods/#pia-retro-fuit-non-inposito-gratia-quid","text":"Agitant Sol litus damnatus non Hector per faciebat ipsaque fugante etiamnum melius, an ordine, omnique passa. Effugit mora feto Lyctia conceptus Latialis vultus pendeat. Ira gloria et cupiere membra, parcite missa. Pulchra natus dicta hunc terque metuens purgamina intervenit huius circumfusaeque tergora senecta ictaque mora. In est quoque, et dixit Limyren . Negant increscere temptataque viridi caelum quantum, nec recepto medullas tu dixit tu et passim excusare. Bacchi vel fessa sine carpsit orbus est: tempora fugis diu?","title":"Pia retro fuit non inposito gratia quid"},{"location":"methods/#moenia-eadem-habuisse-radiataque-iuvenci-vocatur","text":"Nulla enim est precibus; hunc discrimine ut contra, traxit ipse sublime ossa . Gravem nisi tyrannus, et mota in tamen pariter vinci montibus geminaverat potui vulnera Narcissum furorem, ut bellaque. Umeri undis Cycnum nate adduxit videri me est fontes superest: pressit suo utrum Philoctete.","title":"Moenia eadem habuisse radiataque iuvenci vocatur"},{"location":"methods/#in-volunt-populus-novo-obruta-aequi","text":"Quod ramis quacumque media nomen Latini re Thybris sensit ruricolae halitus. In non ubi tum acumine fixo primus levata, vocat tacta, Phrygiaeque furca , in et nox, Pace. Ubi intravit, fugacis: iam suo munera volucres terris prensamque mutet radios, et. In fratres tergum, dabat regia fugacia contigero fixerat.","title":"In volunt populus novo obruta aequi"},{"location":"methods/#imagine-nondum","text":"Glomerataque tuus, membra enim nimium amicior flumina veni. Vix mille, qua soror mortale malo noverit nec mens Echecli feroci ignes arcum; ex dei. Caesareo integer Iamque sanctius iuvat venerantur maestae tenuit , siccat non vates aquis. Gaudia ille non parat fert immo venit canor, dei. Est Aetne ipsamque nimiumque picem, sorores et, ire missa terrasque sumptis siccaverat diremit tum parabant se classem numina. Ne suum , requiescere excelsa patria per Andros paulum quod grave longeque cavernis cum.","title":"Imagine nondum"},{"location":"pipeline/","text":"Tutorials Here we walk through the linebyline pipeline and highlight available features. A Jupyter notebook version of this tutorial is available at: linebyline/docs/tutorials/ For more details on each step and what parameters the user can change, see the configuration file page. Step 0: Imports and the configuration file We first must navigate to the following directory: linebyline/docs/tutorials For this tutorial, the following imports are necessary. import os from linebyline.instruments import instrument from linebyline.specbatch import SpecBatch from linebyline.configs import config from linebyline.parse import ParseSpec To specify the default parameters for the pipeline, we also need to define a configuration file (see the configuration file page for details on the different parameters): cfg = config.get_config('../../linebyline/configs/extraction_config.ini') Step 1: Correcting for known systematics In this first step, the user provides a list of paths to stellar spectra and specifies the corresponding instrument; depending on the instrument, the user may also need to provide paths to the blaze correction files and the cross-correlation function (CCF) files. Given these user inputs, linebyline will load in the provided spectra and correct each for known systematics, including blaze corrections and Doppler shifting the wavelength solution into the heliocentric frame. In this step, we also specify filters on airmass and activity level (see the configuration file page for details on the available filters). Below we outline this step for each supported instrument. HARPS Once in the , we first gather the stellar spectra: ps = os.listdir('../example_data/HARPS/alphaCenB/spectra') paths = ['../example_data/HARPS/alphaCenB/spectra/' + p for p in ps] We then build two dictionaries that point to each spectra's corresponding blaze and CCF file: blaze_key = {} for p in paths: blaze_key[p] = '../example_data/HARPS/alphaCenB/blaze/' + fits.open(p)[0].header['HIERARCH ESO DRS BLAZE FILE'] ccf_key = {} for p in paths: ccf_key[p] = '../example_data/HARPS/alphaCenB/ccf/' + p.split('/')[-1].replace('_e2ds_A','_ccf_K5_A') Lastly, we must initialize the instrument object with these paths and dictionaries, obs = instrument.HARPS(paths, blaze_key, cfg, ccf_key) The instrument object obs can now be passed to the next step in the pipeline and will facilitate loading in the stellar spectra and correcting for known systematics. MAROON-X For MAROON-X, we initialize the instrument object as, obs = instrument.MAROONX(paths, blaze_key, cfg) Notice, ccf_key is no longer required. Step 2: Line-by-line measurements Next, we implement the line-by-line technique outlined by Dumusque (2018) . Note, for here on, the pipeline is agnostic to the chosen instrument (the instrument object we defined in Step 1 will handle all instrument specific concerns). To begin, we define the SpecBatch object, batch = SpecBatch( obs, target = target, config = cfg ) where obs and cfg were defined above, and target is a string that will be the name of the directory for saving the results. We must then load all the input stellar spectra, batch.load_spectra() and normalize their continuums (using a rolling maximum), batch.normalize_spectral_orders() a. Filtering the spectra Before proceeding further, we must remove outlier observations from the input stellar spectra. linebyline filters observations based on the slope of each spectral orders continuum, batch.filter_for_continuum() The user can specify additional filters, by controlling the list of paths passed to linebyline . b. Building a reference spectrum Next, we build a reference spectrum form the input stellar spectra. batch.create_master() To help with memory usage, next call batch.flush() to remove the loaded spectra from active memory (we don't need to have them all loaded at once now that we have the reference spectrum). c. Generating (or importing) a catalog of spectral lines To conduct the line-by-line measurements, we need a catalog of spectral lines. This catalog can either be generated based on the reference spectrum or imported from a user specified file. To specify a list of spectral lines, set the template parameter for batch.fetch_template to a path to the line list. User defined line lists must have the same format as the ESPRESSO line lists. Examples for the K5 and G2 stellar types are provided in, linebyline/docs/example_data/synthetic_templates For example, to use the ESPRESSO K5 template, batch.fetch_template(template='../example_data/synthetic_templates/K5.mas') Alternatively, to have the catalog generated from the reference spectrum, set template='auto' and call, batch.fetch_template(template='auto') Regardless of whether the line list is generated from the reference spectra or user specified, we next want to flag potentially contaminated lines, including those near tellurics or near stichings in the CCD: batch.flag_telluric_TAPAS('../example_data/TAPAS/TAPAS_WMKO_NORAYLEIGH_SPEC') batch.flag_crossover() where we have pointed to an example TAPAS atmospheric spectrum for batch.flag_telluric_TAPAS . d. Making the measurements We're now ready to conduct the line-by-line measurements (yay!). This is handled by the following call, batch.fetch_LBL() To help reduce run-times, the user can specify the number of processors to use. e. Filtering Lastly, we flag outlier line-by-line measurements, batch.filter_LBL() f. Saving To save our results, we run, batch.save_template() batch.save_LBL_data() batch.save_master() Step 3: Processing the measurements Now that we have made the line-by-line measurements, what can we do with them? To start, we load the saved results into the ParseSpec object. dat = ParseSpec(target + '/') where target is the same specified in Step 2. The line-by-line measurements are stored as pandas.DataFrame in dat.data . We next reject flagged measurements (including lines contaminated by tellurics or rejected by the sigma clipping in Step 2f), dat.enforce_filter() To calculate the bulk RV for each spectra, we run t,rv,er = dat.fetch_bulk_RVs(log=True) where log=True saves the bulk RVs to dat.data .","title":"Tutorials"},{"location":"pipeline/#tutorials","text":"Here we walk through the linebyline pipeline and highlight available features. A Jupyter notebook version of this tutorial is available at: linebyline/docs/tutorials/ For more details on each step and what parameters the user can change, see the configuration file page.","title":"Tutorials"},{"location":"pipeline/#step-0-imports-and-the-configuration-file","text":"We first must navigate to the following directory: linebyline/docs/tutorials For this tutorial, the following imports are necessary. import os from linebyline.instruments import instrument from linebyline.specbatch import SpecBatch from linebyline.configs import config from linebyline.parse import ParseSpec To specify the default parameters for the pipeline, we also need to define a configuration file (see the configuration file page for details on the different parameters): cfg = config.get_config('../../linebyline/configs/extraction_config.ini')","title":"Step 0: Imports and the configuration file"},{"location":"pipeline/#step-1-correcting-for-known-systematics","text":"In this first step, the user provides a list of paths to stellar spectra and specifies the corresponding instrument; depending on the instrument, the user may also need to provide paths to the blaze correction files and the cross-correlation function (CCF) files. Given these user inputs, linebyline will load in the provided spectra and correct each for known systematics, including blaze corrections and Doppler shifting the wavelength solution into the heliocentric frame. In this step, we also specify filters on airmass and activity level (see the configuration file page for details on the available filters). Below we outline this step for each supported instrument.","title":"Step 1: Correcting for known systematics"},{"location":"pipeline/#harps","text":"Once in the , we first gather the stellar spectra: ps = os.listdir('../example_data/HARPS/alphaCenB/spectra') paths = ['../example_data/HARPS/alphaCenB/spectra/' + p for p in ps] We then build two dictionaries that point to each spectra's corresponding blaze and CCF file: blaze_key = {} for p in paths: blaze_key[p] = '../example_data/HARPS/alphaCenB/blaze/' + fits.open(p)[0].header['HIERARCH ESO DRS BLAZE FILE'] ccf_key = {} for p in paths: ccf_key[p] = '../example_data/HARPS/alphaCenB/ccf/' + p.split('/')[-1].replace('_e2ds_A','_ccf_K5_A') Lastly, we must initialize the instrument object with these paths and dictionaries, obs = instrument.HARPS(paths, blaze_key, cfg, ccf_key) The instrument object obs can now be passed to the next step in the pipeline and will facilitate loading in the stellar spectra and correcting for known systematics.","title":"HARPS"},{"location":"pipeline/#maroon-x","text":"For MAROON-X, we initialize the instrument object as, obs = instrument.MAROONX(paths, blaze_key, cfg) Notice, ccf_key is no longer required.","title":"MAROON-X"},{"location":"pipeline/#step-2-line-by-line-measurements","text":"Next, we implement the line-by-line technique outlined by Dumusque (2018) . Note, for here on, the pipeline is agnostic to the chosen instrument (the instrument object we defined in Step 1 will handle all instrument specific concerns). To begin, we define the SpecBatch object, batch = SpecBatch( obs, target = target, config = cfg ) where obs and cfg were defined above, and target is a string that will be the name of the directory for saving the results. We must then load all the input stellar spectra, batch.load_spectra() and normalize their continuums (using a rolling maximum), batch.normalize_spectral_orders()","title":"Step 2: Line-by-line measurements"},{"location":"pipeline/#a-filtering-the-spectra","text":"Before proceeding further, we must remove outlier observations from the input stellar spectra. linebyline filters observations based on the slope of each spectral orders continuum, batch.filter_for_continuum() The user can specify additional filters, by controlling the list of paths passed to linebyline .","title":"a. Filtering the spectra"},{"location":"pipeline/#b-building-a-reference-spectrum","text":"Next, we build a reference spectrum form the input stellar spectra. batch.create_master() To help with memory usage, next call batch.flush() to remove the loaded spectra from active memory (we don't need to have them all loaded at once now that we have the reference spectrum).","title":"b. Building a reference spectrum"},{"location":"pipeline/#c-generating-or-importing-a-catalog-of-spectral-lines","text":"To conduct the line-by-line measurements, we need a catalog of spectral lines. This catalog can either be generated based on the reference spectrum or imported from a user specified file. To specify a list of spectral lines, set the template parameter for batch.fetch_template to a path to the line list. User defined line lists must have the same format as the ESPRESSO line lists. Examples for the K5 and G2 stellar types are provided in, linebyline/docs/example_data/synthetic_templates For example, to use the ESPRESSO K5 template, batch.fetch_template(template='../example_data/synthetic_templates/K5.mas') Alternatively, to have the catalog generated from the reference spectrum, set template='auto' and call, batch.fetch_template(template='auto') Regardless of whether the line list is generated from the reference spectra or user specified, we next want to flag potentially contaminated lines, including those near tellurics or near stichings in the CCD: batch.flag_telluric_TAPAS('../example_data/TAPAS/TAPAS_WMKO_NORAYLEIGH_SPEC') batch.flag_crossover() where we have pointed to an example TAPAS atmospheric spectrum for batch.flag_telluric_TAPAS .","title":"c. Generating (or importing) a catalog of spectral lines"},{"location":"pipeline/#d-making-the-measurements","text":"We're now ready to conduct the line-by-line measurements (yay!). This is handled by the following call, batch.fetch_LBL() To help reduce run-times, the user can specify the number of processors to use.","title":"d. Making the measurements"},{"location":"pipeline/#e-filtering","text":"Lastly, we flag outlier line-by-line measurements, batch.filter_LBL()","title":"e. Filtering"},{"location":"pipeline/#f-saving","text":"To save our results, we run, batch.save_template() batch.save_LBL_data() batch.save_master()","title":"f. Saving"},{"location":"pipeline/#step-3-processing-the-measurements","text":"Now that we have made the line-by-line measurements, what can we do with them? To start, we load the saved results into the ParseSpec object. dat = ParseSpec(target + '/') where target is the same specified in Step 2. The line-by-line measurements are stored as pandas.DataFrame in dat.data . We next reject flagged measurements (including lines contaminated by tellurics or rejected by the sigma clipping in Step 2f), dat.enforce_filter() To calculate the bulk RV for each spectra, we run t,rv,er = dat.fetch_bulk_RVs(log=True) where log=True saves the bulk RVs to dat.data .","title":"Step 3: Processing the measurements"},{"location":"tutorials/","text":"Set-up This page describes the steps for installing linebyline , outlines the structure of linebyline , and introduces the configuration file. Installation To install, download the package, change directories into the downloaded folder, and run: pip install . Structural overview","title":"Set-up"},{"location":"tutorials/#set-up","text":"This page describes the steps for installing linebyline , outlines the structure of linebyline , and introduces the configuration file.","title":"Set-up"},{"location":"tutorials/#installation","text":"To install, download the package, change directories into the downloaded folder, and run: pip install .","title":"Installation"},{"location":"tutorials/#structural-overview","text":"","title":"Structural overview"}]}